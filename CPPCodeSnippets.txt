{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // },
  "Main2": {
    "prefix": "main2",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "  $0",
      "  return 0;",
      "}"
    ],
    "description": "CPP Main2 Code Snippet"
  },
  "CPP1": {
    "prefix": "cpp1",
    "body": [
      "using namespace std;",
      "#include <bits/stdc++.h>",
      "using int128 = __int128;",
      "using uint128 = unsigned __int128;",
      "using ll = long long;",
      "using ull = unsigned long long;",
      "using u32 = unsigned;",
      "using ld = long double;",
      "#define F first",
      "#define S second",
      "#define PB push_back",
      "#define nl '\\n'",
      "#define mem(a, b) memset(a, b, sizeof(a))",
      "#define all(x) x.begin(), x.end()",
      "#define rall(x) x.rbegin(), x.rend()",
      "#define sqr(a) ((a) * (a))",
      "#define mx_int_prime 999999937",
      "#define MOD 1000000007",
      "#define fast_io ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
      "#define fraction(a) cout.unsetf(ios::floatfield); cout.precision((a)); cout.setf(ios::fixed, ios::floatfield);",
      "#define file() freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);",
      "const ld PI = acos(-1);",
      "const ld eps = 1e-9;",
      "",
      "void solve() { ",
      "  $0",
      "  return; ",
      "}",
      "int main() {",
      "  fast_io;",
      "// #ifndef ONLINE_JUDGE",
      "//   file()",
      "// #endif",
      "  ll t; cin >> t;",
      "  while (t--) {",
      "    solve();",
      "  }",
      "  return 0;",
      "}"
    ],
    "description": "CPP CPP1 Code Snippet"
  },
  "CPP2": {
    "prefix": "cpp2",
    "body": [
      "using namespace std;",
      "#include <bits/stdc++.h>",
      "using int128 = __int128;",
      "using uint128 = unsigned __int128;",
      "using ll = long long;",
      "using ull = unsigned long long;",
      "using u32 = unsigned;",
      "using ld = long double;",
      "#define F first",
      "#define S second",
      "#define PB push_back",
      "#define nl '\\n'",
      "#define mem(a, b) memset(a, b, sizeof(a))",
      "#define all(x) x.begin(), x.end()",
      "#define rall(x) x.rbegin(), x.rend()",
      "#define sqr(a) ((a) * (a))",
      "#define mx_int_prime 999999937",
      "#define MOD 1000000007",
      "#define fast_io ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
      "#define fraction(a) cout.unsetf(ios::floatfield); cout.precision((a)); cout.setf(ios::fixed, ios::floatfield);",
      "#define file() freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);",
      "const ld PI = acos(-1);",
      "const ld eps = 1e-9;",
      "",
      "void solve() { ",
      "  $0",
      "  return; ",
      "}",
      "int main() {",
      "  fast_io;",
      "// #ifndef ONLINE_JUDGE",
      "//   file()",
      "// #endif",
      "  solve();",
      "  return 0;",
      "}"
    ],
    "description": "CPP CPP2 Code Snippet"
  },
  "Debug": {
    "prefix": "debug",
    "body": [
      "template <typename F, typename S>",
      "ostream& operator<<(ostream& os, const pair<F, S>& p) { return os << \"(\" << p.first << \", \" << p.second << \")\"; }",
      "template <typename T>",
      "ostream& operator<<(ostream& os, const vector<T>& v) {",
      "    os << \"{\";",
      "    for (auto it = v.begin(); it != v.end(); ++it) {",
      "        if (it != v.begin()) os << \", \"; os << *it;",
      "    }",
      "    return os << \"}\";",
      "}",
      "template <typename T>",
      "ostream& operator<<(ostream& os, const set<T>& v) {",
      "    os << \"[\";",
      "    for (auto it = v.begin(); it != v.end(); ++it) {",
      "        if (it != v.begin()) os << \", \"; os << *it;",
      "    }",
      "    return os << \"]\";",
      "}",
      "template <typename T>",
      "ostream& operator<<(ostream& os, const multiset<T>& v) {",
      "    os << \"[\";",
      "    for (auto it = v.begin(); it != v.end(); ++it) {",
      "        if (it != v.begin()) os << \", \"; os << *it;",
      "    }",
      "    return os << \"]\";",
      "}",
      "template <typename F, typename S>",
      "ostream& operator<<(ostream& os, const map<F, S>& v) {",
      "    os << \"[\";",
      "    for (auto it = v.begin(); it != v.end(); ++it) {",
      "        if (it != v.begin()) os << \", \"; os << it->first << \" = \" << it->second;",
      "    }",
      "    return os << \"]\";",
      "}",
      "#define dbg(args...) do {  cerr << #args << \" : \"; ojotha(args); } while (0)",
      "void ojotha() { cerr << endl; }",
      "template <typename T>",
      "void ojotha(T a[], int n) {",
      "    for (int i = 0; i < n; ++i) cerr << a[i] << ' '; cerr << endl;",
      "}",
      "template <typename T, typename... hello>",
      "void ojotha(T arg, const hello&... rest) { cerr << arg << ' '; ojotha(rest...); }",
    ],
    "description": "CPP Debug Code Snippet"
  },
  "Merge Sort": {
    "prefix": "MergeSort",
    "body": [
      "void merge(vector<ll>& a, ll l, ll m, ll r) {",
      "  ll n1 = m - l + 1;",
      "  ll n2 = r - m;",
      "  vector<ll> L(n1), R(n2);",
      "  for (ll i = 0; i < n1; i++) L[i] = a[l + i];",
      "  for (ll j = 0; j < n2; j++) R[j] = a[m + 1 + j];",
      "  ll i = 0, j = 0;",
      "  ll k = l;",
      "  while (i < n1 && j < n2) {",
      "    if (L[i] <= R[j]) {",
      "      a[k] = L[i];",
      "      i++;",
      "    } else {",
      "      a[k] = R[j];",
      "      j++;",
      "    }",
      "    k++;",
      "  }",
      "  while (i < n1) {",
      "    a[k] = L[i];",
      "    i++;",
      "    k++;",
      "  }",
      "  while (j < n2) {",
      "    a[k] = R[j];",
      "    j++;",
      "    k++;",
      "  }",
      "}",
      "void mergeSort(vector<ll>& a, ll l, ll r) {",
      "  if (l >= r) return;",
      "  ll m = l + (r - l) / 2;",
      "  mergeSort(a, l, m);",
      "  mergeSort(a, m + 1, r);",
      "  merge(a, l, m, r);",
      "}",
    ],
    "description": "CPP MergeSort Code Snippet"
  },
  "Quick Sort": {
    "prefix": "QuickSort",
    "body": [
      "ll partition(vector<ll>& a, ll l, ll h) {",
      "  ll p = a[h];",
      "  ll i = l - 1;",
      "  for (ll j = l; j <= h - 1; j++) {",
      "    if (a[j] < p) {",
      "      i++;",
      "      swap(a[i], a[j]);",
      "    }",
      "  }",
      "  swap(a[i + 1], a[h]);",
      "  return i + 1;",
      "}",
      "void quickSort(vector<ll>& a, ll l, ll h) {",
      "  if (l < h) {",
      "    ll p = partition(a, l, h);",
      "    quickSort(a, l, p - 1);",
      "    quickSort(a, p + 1, h);",
      "  }",
      "}",
    ],
    "description": "CPP Quick Sort Code Snippet"
  },
  "Bubble Sort": {
    "prefix": "BubbleSort",
    "body": [
      "void bubbleSort(vector<ll>& a) {",
      "  ll n = a.size();",
      "  bool swpd;",
      "  for (ll i = 0; i < n - 1; i++) {",
      "    swpd = false;",
      "    for (ll j = 0; j < n - i - 1; j++) {",
      "      if (a[j] > a[j + 1]) {",
      "        swap(a[j], a[j + 1]);",
      "        swpd = true;",
      "      }",
      "    }",
      "    if (!swpd) break;",
      "  }",
      "  return;",
      "}",
    ],
    "description": "CPP Bubble Sort Code Snippet"
  },
  "Depth First Search": {
    "prefix": "DFS",
    "body": [
      "void dfsRec(vector<vector<ll>>& a, vector<bool>& v, ll s, vector<ll>& r) {",
      "v[s] = true;",
      "  r.PB(s);",
      "  for (ll i : a[s])",
      "    if (v[i] == false) dfsRec(a, v, i, r);",
      "}",
      "vector<ll> DFS(vector<vector<ll>>& a) {",
      "  vector<bool> v(a.size(), false);",
      "  vector<ll> r;",
      "  dfsRec(a, v, 0, r);",
      "  return r;",
      "}",
      "void addEdge(vector<vector<ll>>& a, ll s, ll t) {",
      "  a[s].PB(t); a[t].PB(s);",
      "}",
      "void runDfs() {",
      "  ll V = 5;",
      "  vector<vector<ll>> adj(V);",
      "  vector<vector<ll>> edges = {{1, 2}, {1, 0}, {2, 0}, {2, 3}, {2, 4}};",
      "  for (auto& edge : edges) addEdge(adj, edge[0], edge[1]);",
      "  vector<ll> res = DFS(adj);",
      "  for (ll i = 0; i < V; i++) cout << res[i] <<\" \";",
      "  cout << nl;",
      "  return;",
      "}",
    ],
    "description": "CPP Depth First Search Code Snippet"
  },
  "Breadth First Search": {
    "prefix": "BFS",
    "body": [
      "vector<ll> bfs(vector<vector<ll>>& a) {",
      "  ll V = a.size(), s = 0;",
      "  vector<ll> r;",
      "  queue<ll> q;",
      "  vector<bool> v(V, false);",
      "  v[s] = true;",
      "  q.push(s);",
      "  while (!q.empty()) {",
      "    ll crr = q.front();",
      "    q.pop();",
      "    r.push_back(crr);",
      "    for (ll x : a[crr]) {",
      "      if (!v[x]) {",
      "        v[x] = true;",
      "        q.push(x);",
      "      }",
      "    }",
      "  }",
      "  return r;",
      "}",
      "void runBFS() {",
      "  vector<vector<ll>> adj = {{1, 2}, {0, 2, 3}, {0, 4}, {1, 4}, {2, 3}};",
      "  vector<ll> ans = bfs(adj);",
      "  for (auto i : ans) {",
      "    cout << i << \" \";",
      "  }",
      "  cout << nl;",
      "  return;",
      "}",
    ],
    "description": "CPP Breadth First Search Code Snippet"
  },
  "Kruskal MST": {
    "prefix": "KruskalMST",
    "body": [
      "class DSU {",
      "  vector<ll> parent, rank;",
      "public:",
      "  DSU(ll n) {",
      "    parent.resize(n);",
      "    rank.resize(n);",
      "    for (ll i = 0; i < n; i++) {",
      "      parent[i] = i;",
      "      rank[i] = 1;",
      "    }",
      "  }",
      "  ll find(ll i) {",
      "    return (parent[i] == i) ? i : (parent[i] = find(parent[i]));",
      "  }",
      "  void unite(ll x, ll y) {",
      "    ll s1 = find(x), s2 = find(y);",
      "    if (s1 != s2) {",
      "      if (rank[s1] < rank[s2]) parent[s1] = s2;",
      "      else if (rank[s1] > rank[s2]) parent[s2] = s1;",
      "      else parent[s2] = s1, rank[s1]++;",
      "    }",
      "  }",
      "};",
      "bool comparator(vector<ll>& a, vector<ll>& b) {",
      "  if (a[2] <= b[2]) return true;",
      "  return false;",
      "}",
      "ll kruskalsMST(ll V, vector<vector<ll>>& edges) {",
      "  sort(edges.begin(), edges.end(), comparator);",
      "  DSU dsu(V);",
      "  ll cost = 0, count = 0;",
      "  for (auto& e : edges) {",
      "    ll x = e[0], y = e[1], w = e[2];",
      "    if (dsu.find(x) != dsu.find(y)) {",
      "      dsu.unite(x, y);",
      "      cost += w;",
      "      count++;",
      "      if (count == V - 1) break;",
      "    }",
      "  }",
      "  return cost;",
      "}",
      "void runKMST() {",
      "  vector<vector<ll>> edges = {{0, 1, 10}, {1, 3, 15}, {2, 3, 4}, {2, 0, 6}, {0, 3, 5}};",
      "  cout << kruskalsMST(4, edges);",
      "  return;",
      "}",
    ],
    "description": "CPP Kruskal MST Code Snippet"
  },
  "Prim's MST": {
    "prefix": "PrimsMST",
    "body": [
      "ll spanningTree(ll V, ll E, vector<vector<ll>>& edges) {",
      "  vector<vector<ll>> adj[V];",
      "  for (ll i = 0; i < E; i++) {",
      "    ll u = edges[i][0];",
      "    ll v = edges[i][1];",
      "    ll wt = edges[i][2];",
      "    adj[u].push_back({ v, wt });",
      "    adj[v].push_back({ u, wt });",
      "  }",
      "  priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> pq;",
      "  vector<bool> visited(V, false);",
      "  ll res = 0;",
      "  pq.push({ 0, 0 });",
      "  while (!pq.empty()) {",
      "    auto p = pq.top();",
      "    pq.pop();",
      "    ll wt = p.first;",
      "    ll u = p.second;",
      "    if (visited[u] == true) continue;",
      "    res += wt;",
      "    visited[u] = true;",
      "    for (auto v : adj[u]) {",
      "      if (visited[v[0]] == false) {",
      "        pq.push({ v[1], v[0] });",
      "      }",
      "    }",
      "  }",
      "  return res;",
      "}",
      "void runPrimsMST() {",
      "  vector<vector<ll>> graph = {{0, 1, 5}, {1, 2, 3}, {0, 2, 1}};",
      "  cout << spanningTree(3, 3, graph) << endl;",
      "  return;",
      "}",
    ],
    "description": "CPP Prim's MST Code Snippet"
  },
  "Binary Search": {
    "prefix": "BinarySearch",
    "body": [
      "ll binarySearch(ll a[], ll l, ll r, ll x) {",
      "  while (l <= r) {",
      "    ll m = l + (r - l) / 2;",
      "    if (a[m] == x) return m;",
      "    if (a[m] < x) l = m + 1;",
      "    else r = m - 1;",
      "  }",
      "  return -1;",
      "}",
    ],
    "description": "CPP Binary Search Code Snippet"
  },
  "Heap Sort": {
    "prefix": "HeapSort",
    "body": [
      "void heapify(vector<ll>& a, ll n, ll i) {",
      "  ll largest = i;",
      "  ll l = 2 * i + 1;",
      "  ll r = 2 * i + 2;",
      "  if (l < n && a[l] > a[largest]) largest = l;",
      "  if (r < n && a[r] > a[largest]) largest = r;",
      "  if (largest != i) {",
      "    swap(a[i], a[largest]);",
      "    heapify(a, n, largest);",
      "  }",
      "}",
      "void heapSort(vector<ll>& a) {",
      "  ll n = a.size();",
      "  for (ll i = n / 2 - 1; i >= 0; i--) heapify(a, n, i);",
      "  for (ll i = n - 1; i > 0; i--) {",
      "    swap(a[0], a[i]);",
      "    heapify(a, i, 0);",
      "  }",
      "}",
      "void runHeapSort() {",
      "  vector<ll> a = { 9, 4, 3, 8, 10, 2, 5 };",
      "  heapSort(a);",
      "  return;",
      "}",
    ],
    "description": "CPP Heap Sort Code Snippet"
  },
}
